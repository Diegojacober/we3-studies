import { ethers } from "ethers";
import fs from "fs-extra";
import path from "path";
import "dotenv/config";

async function main() {
  // https://playground.open-rpc.org/?schemaUrl=https://raw.githubusercontent.com/ethereum/execution-apis/assembled-spec/openrpc.json&uiSchema%5BappBar%5D%5Bui:splitView%5D=false&uiSchema%5BappBar%5D%5Bui:input%5D=false&uiSchema%5BappBar%5D%5Bui:examplesDropdown%5D=false
  // rodar ganache cli no wsl
  try {
    const provider = new ethers.JsonRpcProvider(process.env.RPC_URL);
    // const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
    const encryptedJson = fs.readFileSync(
      path.join(__dirname, "../.encryptedKey.json"),
      "utf8",
    );
    let wallet = ethers.Wallet.fromEncryptedJsonSync(
      encryptedJson,
      process.env.PRIVATE_KEY_PASSWORD,
    );
    wallet = wallet.connect(provider);

    const abiPath = path.join(
      __dirname,
      "../SimpleStorage_sol_SimpleStorage.abi",
    );
    const binPath = path.join(
      __dirname,
      "../SimpleStorage_sol_SimpleStorage.bin",
    );

    if (!fs.existsSync(abiPath) || !fs.existsSync(binPath)) {
      throw new Error("ABI or Binary file not found");
    }

    const abi = fs.readFileSync(abiPath, "utf8");
    const binary = fs.readFileSync(binPath, "utf8");

    const contractFactory = new ethers.ContractFactory(abi, binary, wallet);

    console.log("Deploying, please await...");
    const contract = await contractFactory.deploy();
    console.log("Deployed at: ", (await contract.getAddress()).toString());
    // const transactionReceipt = await contract.deploymentTransaction().wait(1);

    // console.log("Let's deploy with only transaction data!");
    // const nonce = await wallet.getNonce();
    // console.log("nonce: ", nonce);
    // const tx = {
    //   nonce: nonce,
    //   gasPrice: "2000000000",
    //   gasLimit: "30000000",
    //   to: null,
    //   value: 0,
    //   data: "0x6080604052348015600e575f80fd5b5061090e8061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610060575f3560e01c80632e64cec1146100645780634f2be91f146100825780636057361d146100a05780636f760f41146100bc5780638bab8dd5146100d85780639e7a13ad14610108575b5f80fd5b61006c610139565b60405161007991906102d5565b60405180910390f35b61008a610141565b60405161009791906102d5565b60405180910390f35b6100ba60048036038101906100b59190610329565b610149565b005b6100d660048036038101906100d19190610490565b610152565b005b6100f260048036038101906100ed91906104ea565b6101db565b6040516100ff91906102d5565b60405180910390f35b610122600480360381019061011d9190610329565b610208565b604051610130929190610591565b60405180910390f35b5f8054905090565b5f6002905090565b805f8190555050565b5f6040518060400160405280838152602001848152509050600181908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f015560208201518160010190816101b091906107b9565b505050816002846040516101c491906108c2565b908152602001604051809103902081905550505050565b6002818051602081018201805184825260208301602085012081835280955050505050505f915090505481565b60018181548110610217575f80fd5b905f5260205f2090600202015f91509050805f01549080600101805461023c906105ec565b80601f0160208091040260200160405190810160405280929190818152602001828054610268906105ec565b80156102b35780601f1061028a576101008083540402835291602001916102b3565b820191905f5260205f20905b81548152906001019060200180831161029657829003601f168201915b5050505050905082565b5f819050919050565b6102cf816102bd565b82525050565b5f6020820190506102e85f8301846102c6565b92915050565b5f604051905090565b5f80fd5b5f80fd5b610308816102bd565b8114610312575f80fd5b50565b5f81359050610323816102ff565b92915050565b5f6020828403121561033e5761033d6102f7565b5b5f61034b84828501610315565b91505092915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6103a28261035c565b810181811067ffffffffffffffff821117156103c1576103c061036c565b5b80604052505050565b5f6103d36102ee565b90506103df8282610399565b919050565b5f67ffffffffffffffff8211156103fe576103fd61036c565b5b6104078261035c565b9050602081019050919050565b828183375f83830152505050565b5f61043461042f846103e4565b6103ca565b9050828152602081018484840111156104505761044f610358565b5b61045b848285610414565b509392505050565b5f82601f83011261047757610476610354565b5b8135610487848260208601610422565b91505092915050565b5f80604083850312156104a6576104a56102f7565b5b5f83013567ffffffffffffffff8111156104c3576104c26102fb565b5b6104cf85828601610463565b92505060206104e085828601610315565b9150509250929050565b5f602082840312156104ff576104fe6102f7565b5b5f82013567ffffffffffffffff81111561051c5761051b6102fb565b5b61052884828501610463565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f61056382610531565b61056d818561053b565b935061057d81856020860161054b565b6105868161035c565b840191505092915050565b5f6040820190506105a45f8301856102c6565b81810360208301526105b68184610559565b90509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061060357607f821691505b602082108103610616576106156105bf565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026106787fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261063d565b610682868361063d565b95508019841693508086168417925050509392505050565b5f819050919050565b5f6106bd6106b86106b3846102bd565b61069a565b6102bd565b9050919050565b5f819050919050565b6106d6836106a3565b6106ea6106e2826106c4565b848454610649565b825550505050565b5f90565b6106fe6106f2565b6107098184846106cd565b505050565b5b8181101561072c576107215f826106f6565b60018101905061070f565b5050565b601f821115610771576107428161061c565b61074b8461062e565b8101602085101561075a578190505b61076e6107668561062e565b83018261070e565b50505b505050565b5f82821c905092915050565b5f6107915f1984600802610776565b1980831691505092915050565b5f6107a98383610782565b9150826002028217905092915050565b6107c282610531565b67ffffffffffffffff8111156107db576107da61036c565b5b6107e582546105ec565b6107f0828285610730565b5f60209050601f831160018114610821575f841561080f578287015190505b610819858261079e565b865550610880565b601f19841661082f8661061c565b5f5b8281101561085657848901518255600182019150602085019450602081019050610831565b86831015610873578489015161086f601f891682610782565b8355505b6001600288020188555050505b505050505050565b5f81905092915050565b5f61089c82610531565b6108a68185610888565b93506108b681856020860161054b565b80840191505092915050565b5f6108cd8284610892565b91508190509291505056fea2646970667358221220f5d895e7b44b0b93d19cbbbed4b1cb1897b6c685e51e65a42ea94cf3b64a75a964736f6c634300081a0033",
    //   chainId: "1337",
    // };

    // const signedTxResponse = await wallet.signTransaction(tx);

    // console.log(signedTxResponse);

    const currentFavoriteNumber = await contract.retrieve();
    console.log(`Current Favorite Number: ${currentFavoriteNumber.toString()}`);
    const transactionResponse = await contract.store("7");
    const transactionReceipt = await transactionResponse.wait(1);
    const updatedFavoriteNumber = await contract.retrieve();
    console.log(`Current Favorite Number: ${updatedFavoriteNumber.toString()}`);
  } catch (error) {
    console.error("Error deploying contract:", error);
    if (error.transaction) {
      console.error("Transaction data:", error.transaction);
    }
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.log(error);
    process.exit(1);
  });
